import json
from pprint import pprint
from numpy     import mean, sqrt, square, subtract
from Netflix import netflix_read
import sys

id_list = ["1417435","2312054","462685"]
avg_dict = {}
with open('ezo55-Average_Viewer_Rating_Cache.json') as data_file:
#with open('tu564_probe_expected.json') as data_file:  
#with open('BRG564-Average_Movie_Rating_Cache.json') as data_file:
#with open('testing.json') as data_file:
    data = json.load(data_file)

#print(mean([v for v in data.values()]))


#average of average movie rating: 3.2281371945
#average of average viewer rating: 3.67413045111

#avg_movies_rate = {"2043":3.7776648456358783, "10851":3.8544080604534003, "41": 1.6344086021505377}
#avg_customer_rate = {'1417435': 3.508816120906801, '462685': 3.792405063291139, '2312054': 4.457142857142857}

#expected = {"2043":{'1417435': 3, '462685': 4, '2312054': 1}, "10851":{'1417435': 3, '462685': 5, '2312054': 4}}

avg_avg_movies = 3.2281371945
avg_avg_customer = 3.67413045111

avg_movies_rate = {"4610": 3.4409799554565703, "7168": 3.885803851321093, "461": 3.46875, "7057": 4.702611063648014, "7167": 2.3421052631578947}
avg_customer_rate = {"1977373": 4.01555023923445, "272772": 3.99388379204893, "2436518": 4.507692307692308, "1672477": 4.2465753424657535, "2227664": 3.5153970826580228, "1755808": 3.6, "1059385": 3.490566037735849, "109112": 3.6855100714749836, "2280882": 3.9532467532467535, "2617555": 4.649681528662421, "1449813": 4.019230769230769, "1364038": 3.5789473684210527, "2045800": 3.6956521739130435, "236989": 3.8627450980392157, "1401198": 4.089820359281437, "2328117": 4.488505747126437, "202455": 4.470588235294118, "419313": 3.6893617021276595, "870496": 3.745664739884393, "2586172": 3.962962962962963, "345925": 3.888704318936877, "1253590": 3.8166089965397925, "1745120": 4.246913580246914, "14060": 4.448387096774193, "296989": 4.1341681574239715, "50400": 4.140396659707725, "2198961": 3.076923076923077, "776857": 3.4782608695652173, "1240568": 3.377049180327869, "1792794": 3.8125, "1223867": 3.900900900900901, "1372581": 3.8275862068965516, "417363": 3.479338842975207, "2060373": 3.9100719424460433, "1892264": 3.7971500419111486, "2195117": 4.377551020408164, "990064": 4.25, "348114": 3.86, "826793": 3.4878048780487805, "1382465": 3.7567567567567566, "1939357": 3.670918367346939, "1520875": 3.7966101694915255, "1048550": 3.2147001934235977, "1076295": 3.628352490421456, "1778576": 4.312020460358056, "1400207": 3.6151515151515152, "1135276": 3.7557251908396947, "1845276": 3.594059405940594, "2240805": 4.0, "1951693": 4.029411764705882, "150547": 3.8641975308641974, "1258134": 3.3734939759036147, "1358210": 4.328042328042328, "1731764": 3.638888888888889, "1202021": 3.2953846153846156, "64422": 3.5, "875402": 3.189873417721519, "1282645": 3.582089552238806, "2648436": 3.6639344262295084, "2218547": 3.91726618705036, "2569597": 4.2631578947368425, "662879": 4.217465753424658, "1443683": 4.24468085106383, "323893": 4.766666666666667, "1412869": 4.214285714285714, "1373038": 3.4265734265734267, "54781": 3.5189620758483033, "1533444": 3.695, "881929": 3.4587628865979383, "1668353": 3.5128205128205128, "1993729": 3.8297872340425534, "1620134": 3.4878048780487805, "2025409": 4.235294117647059, "497615": 3.504424778761062, "1596762": 3.5780730897009967, "1415648": 4.32520325203252, "2214251": 3.0435897435897434, "23819": 4.1395348837209305, "2151618": 3.7717622080679405, "1587696": 3.6600985221674875, "2338216": 4.386363636363637, "848750": 3.8404907975460123, "163043": 4.62, "2311816": 3.931166347992352, "109734": 4.65625, "2601453": 3.7741116751269037, "1463256": 4.230769230769231, "837786": 3.9657534246575343, "240308": 3.853801169590643, "2251346": 3.625615763546798, "593278": 4.072727272727272, "629664": 3.375, "1525309": 3.318681318681319, "1978844": 3.1945454545454544, "737244": 3.781609195402299, "2145185": 3.7010309278350517, "2094602": 3.055393586005831, "2075019": 4.186046511627907, "1458847": 3.1319148936170214, "993870": 3.129277566539924, "179980": 3.7177033492822966, "2417642": 3.1615384615384614, "2056724": 3.2906976744186047, "1131433": 4.205128205128205, "738504": 3.3098039215686272, "155818": 4.053003533568905, "1108378": 3.339425587467363, "1987339": 3.1372549019607843, "1759328": 4.368421052631579, "1940764": 3.147804054054054, "695328": 3.98125, "2126814": 4.271428571428571, "798841": 3.709090909090909, "1900217": 2.0588235294117645, "2507699": 3.9134615384615383, "437074": 4.015873015873016, "1137834": 3.74025974025974, "1372847": 4.04140127388535, "915201": 3.760869565217391, "636052": 3.96875, "2207453": 3.9127906976744184, "386143": 3.8575757575757574, "2288234": 3.2335329341317367, "1633927": 3.4523809523809526, "83054": 3.782258064516129, "2522930": 3.6129032258064515}

def calculate (i, j):
	avg_movies = avg_movies_rate[str(i)]
	rating = 0
	diff = 0
	if(round(avg_movies,3) > round(avg_avg_movies,3)):
		print("good movies",)
	elif (round(avg_movies,3) == round(avg_avg_movies,3)):
		print("averag movies",)
	else:
		print("bad movies",)

	if(j != 0) :
		avg_personal = avg_customer_rate[str(j)]
		#expected_rate = expected[str(i)][str(j)]
		diff = avg_movies - avg_personal

		if(round(avg_personal,3) > round(avg_avg_customer,3)):
			print("more critical",)
		elif(round(avg_personal,3) == round(avg_avg_customer,3)):
			print("same",)
		else:
			print("easy rating",)

	rating = int(avg_movies)

	print(i, j, diff, rating)
	print("--------------------------------------")
'''
calculate(2043, 1417435)
calculate(10851, 1417435)
calculate(2043, 462685)
calculate(10851, 462685)
calculate(2043, 2312054)
calculate(10851, 2312054)
'''



def main():
	#cache_generator(sys.stdin, sys.stdout)
	testing(sys.stdin, sys.stdout)

def testing(r, w):
	dict1 = {}
	dict2 = {}
	f=open("jmt3675-probe_solution.txt")
	lines=f.readlines()

	counter = 0
	for s in r :
		i, j = netflix_read(s)

		m, n = netflix_read(lines[counter])
		if(j!=0):
			dict2[str(j)] = n
		else:
			dict2 = {}

		if(counter%1000==0):
			print(counter)
		counter+=1
		dict1[str(i)] = dict2


	k = json.dumps(dict1, ensure_ascii=False)
	f = open("tu564_probe_expected.json", 'w')
	f.write(k)

def cache_generator (r, w):
	dict1 = {}
	dict2 = {}

	#f = open("tu564_probe_expected.json", 'w')
	with open('ezo55-Average_Viewer_Rating_Cache.json') as viewer_file:
		viewer = json.load(viewer_file)
	with open('BRG564-Average_Movie_Rating_Cache.json') as movies_file:
		movies = json.load(movies_file)

	for s in r :
		i, j = netflix_read(s)
		#v = netflix_eval(i, j)
		if(j!=0):
			dict1[str(i)] = movies[str(i)]
			dict2[str(j)] = viewer[str(j)]

	k = json.dumps(dict1, ensure_ascii=False)
	l = json.dumps(dict2, ensure_ascii=False)
	print(k)
	print(l)
	#f.write(k)

main()
